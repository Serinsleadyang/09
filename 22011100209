import java.util.Arrays;
import java.util.Scanner;
//进程类
class Process{
	int pid;//进程的标记符
	int arrivalTime;//到达时间
	int burstTime;//执行时间
	//构造函数
	Process(int pid,int arrivalTime,int burstTime){
		this.pid=pid;
		this.arrivalTime=arrivalTime;
		this.burstTime=burstTime;
	}
}
public class SJFSCheduling {
	//短作业优先调度算法函数
	static float SJF_Scheduling(Process[] Processes){
		 System.out.println("初始进程数量为：" +Processes.length);
	        // 排序进程列表（根据执行时间从短到长）
	        Arrays.sort(Processes, (a,b)->a.burstTime - b.burstTime);
	        int completionTime = 0;
	        float waitingTime = 0;
	        for (Process process : Processes) {
	            if (completionTime > process.arrivalTime) {
	                waitingTime += completionTime - process.arrivalTime; // 计算等待时间
	            }
	            // 更新完成时间
	            completionTime += process.burstTime;

	            System.out.println("进程ID为 " + process.pid + "，完成时间为 " + completionTime + "，等待时间为 " + waitingTime);
	        }
	        // 计算平均等待时间
	        float avgWaitingTime = waitingTime / Processes.length;
	        return avgWaitingTime;		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 Scanner Scanner = new Scanner(System.in);
	        System.out.print("请输入进程数量：");
	        int numProcesses = Scanner.nextInt();
	        Process[] processes = new Process[numProcesses];
	        for (int i = 0; i < numProcesses; ++i) {
	            System.out.println("进程ID为 " + (i + 1));
	            System.out.print("请输入到达时间：");
	            int arrivalTime = Scanner.nextInt();
	            System.out.print("请输入执行时间：");
	            int burstTime = Scanner.nextInt();
	            processes[i] = new Process(i + 1, arrivalTime, burstTime);
	        }
	        float avgWaitingTime = SJF_Scheduling(processes);
	        System.out.println("平均等待时间为：" + avgWaitingTime);
	}

}
